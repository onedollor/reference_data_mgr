# CSV数据管理系统 - Docker Compose配置
version: '3.8'

services:
  # SQL Server数据库
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: csvmanager-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd123
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - csvmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong@Passw0rd123' -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: csvmanager-backend
    environment:
      # Windows认证 - 注意：Docker环境中可能需要额外配置
      - DATABASE_URL=mssql+pyodbc://host.docker.internal:1433/CSVDataManager?driver=ODBC+Driver+17+for+SQL+Server&trusted_connection=yes
      - DEBUG=false
      - SECRET_KEY=your-production-secret-key-change-me
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - csvmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: csvmanager-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - csvmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存（可选，用于会话存储）
  redis:
    image: redis:7-alpine
    container_name: csvmanager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - csvmanager-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local

networks:
  csvmanager-network:
    driver: bridge